diff -u -3 -p -r1.18 bfd.texinfo
--- old/bfd/doc/bfd.texinfo 28 Oct 2010 11:40:25 -0000      1.18
+++ new/bfd/doc/bfd.texinfo 4 Jan 2013 22:07:21 -0000
@@ -322,7 +322,7 @@ All of BFD lives in one directory.
 @printindex cp
 
 @tex
-% I think something like @colophon should be in texinfo.  In the
+% I think something like @@colophon should be in texinfo.  In the
 % meantime:
 \long\def\colophon{\hbox to0pt{}\vfill
 \centerline{The body of this manual is set in}
@@ -333,7 +333,7 @@ All of BFD lives in one directory.
 \centerline{{\sl\fontname\tensl\/}}
 \centerline{are used for emphasis.}\vfill}
 \page\colophon
-% Blame: doc@cygnus.com, 28mar91.
+% Blame: doc@@cygnus.com, 28mar91.
 @end tex
 
 @bye
diff -u -3 -p -r1.289 ld.texinfo
--- old/ld/ld.texinfo       18 Dec 2012 20:42:43 -0000      1.289
+++ new/ld/ld.texinfo       4 Jan 2013 22:07:27 -0000
@@ -7877,7 +7877,7 @@ If you have more than one @code{SECT} st
 @printindex cp
 
 @tex
-% I think something like @colophon should be in texinfo.  In the
+% I think something like @@colophon should be in texinfo.  In the
 % meantime:
 \long\def\colophon{\hbox to0pt{}\vfill
 \centerline{The body of this manual is set in}
@@ -7888,7 +7888,7 @@ If you have more than one @code{SECT} st
 \centerline{{\sl\fontname\tensl\/}}
 \centerline{are used for emphasis.}\vfill}
 \page\colophon
-% Blame: doc@cygnus.com, 28mar91.
+% Blame: doc@@cygnus.com, 28mar91.
 @end tex
 
 @bye
diff -urp old/bfd/doc/elf.texi new/bfd/doc/elf.texi
diff -urp old/gas/doc/c-arc.texi new/gas/doc/c-arc.texi
--- old/gas/doc/c-arc.texi	2010-06-03 15:06:19.000000000 +0200
+++ new/gas/doc/c-arc.texi	2014-01-02 21:35:33.000000000 +0100
@@ -15,318 +15,6 @@
 
 @set ARC_CORE_DEFAULT 6
 
-@cindex ARC support
-@menu
-* ARC Options::              Options
-* ARC Syntax::               Syntax
-* ARC Floating Point::       Floating Point
-* ARC Directives::           ARC Machine Directives
-* ARC Opcodes::              Opcodes
-@end menu
-
-
-@node ARC Options
-@section Options
-@cindex ARC options (none)
-@cindex options for ARC (none)
-
-@table @code
-
-@cindex @code{-marc[5|6|7|8]} command line option, ARC
-@item -marc[5|6|7|8]
-This option selects the core processor variant.  Using
-@code{-marc} is the same as @code{-marc@value{ARC_CORE_DEFAULT}}, which
-is also the default.
-
-@table @code
-
-@cindex @code{arc5} arc5, ARC
-@item arc5
-Base instruction set.
-
-@cindex @code{arc6} arc6, ARC
-@item arc6
-Jump-and-link (jl) instruction.  No requirement of an instruction between
-setting flags and conditional jump.  For example:
-
-@smallexample
-  mov.f r0,r1
-  beq   foo
-@end smallexample
-
-@cindex @code{arc7} arc7, ARC
-@item arc7
-Break (brk) and sleep (sleep) instructions.
-
-@cindex @code{arc8} arc8, ARC
-@item arc8
-Software interrupt (swi) instruction.
-
-@end table
-
-Note: the @code{.option} directive can to be used to select a core
-variant from within assembly code.
-
-@cindex @code{-EB} command line option, ARC
-@item -EB
-This option specifies that the output generated by the assembler should
-be marked as being encoded for a big-endian processor.
-
-@cindex @code{-EL} command line option, ARC
-@item -EL
-This option specifies that the output generated by the assembler should
-be marked as being encoded for a little-endian processor - this is the
-default.
-
-@end table
-
-
-@node ARC Syntax
-@section Syntax
-@menu
-* ARC-Chars::                Special Characters
-* ARC-Regs::                 Register Names
-@end menu
-
-@node ARC-Chars
-@subsection Special Characters
-
-@cindex ARC special characters
-@cindex special characters, ARC
-*TODO*
-
-@node ARC-Regs
-@subsection Register Names
-
-@cindex ARC register names
-@cindex register names, ARC
-*TODO*
-
-
-@node ARC Floating Point
-@section Floating Point
-
-@cindex floating point, ARC (@sc{ieee})
-@cindex ARC floating point (@sc{ieee})
-The ARC core does not currently have hardware floating point
-support. Software floating point support is provided by @code{GCC}
-and uses @sc{ieee} floating-point numbers.
-
-
-@node ARC Directives
-@section ARC Machine Directives
-
-@cindex machine directives, ARC
-@cindex ARC machine directives
-The ARC version of @code{@value{AS}} supports the following additional
-machine directives:
-
-@table @code
-
-@cindex @code{2byte} directive, ARC
-@item .2byte @var{expressions}
-*TODO*
-
-@cindex @code{3byte} directive, ARC
-@item .3byte @var{expressions}
-*TODO*
-
-@cindex @code{4byte} directive, ARC
-@item .4byte @var{expressions}
-*TODO*
-
-@cindex @code{extAuxRegister} directive, ARC
-@item .extAuxRegister @var{name},@var{address},@var{mode}
-The ARCtangent A4 has extensible auxiliary register space.  The
-auxiliary registers can be defined in the assembler source code by
-using this directive.  The first parameter is the @var{name} of the
-new auxiallry register.  The second parameter is the @var{address} of
-the register in the auxiliary register memory map for the variant of
-the ARC.  The third parameter specifies the @var{mode} in which the
-register can be operated is and it can be one of: 
-
-@table @code
-@item r          (readonly) 
-@item w          (write only)
-@item r|w        (read or write)
-@end table
-
-For example:
-
-@smallexample
-  .extAuxRegister mulhi,0x12,w
-@end smallexample
-
-This specifies an extension auxiliary register called @emph{mulhi}
-which is at address 0x12 in the memory space and which is only
-writable.
-
-@cindex @code{extCondCode} directive, ARC
-@item .extCondCode @var{suffix},@var{value}
-The condition codes on the ARCtangent A4 are extensible and can be
-specified by means of this assembler directive.  They are specified
-by the suffix and the value for the condition code.  They can be used to
-specify extra condition codes with any values.  For example:
-
-@smallexample
-  .extCondCode is_busy,0x14
-  
-   add.is_busy  r1,r2,r3
-   bis_busy     _main
-@end smallexample
-
-@cindex @code{extCoreRegister} directive, ARC
-@item .extCoreRegister @var{name},@var{regnum},@var{mode},@var{shortcut}
-Specifies an extension core register @var{name} for the application.
-This allows a register @var{name} with a valid @var{regnum} between 0
-and 60, with the following as valid values for @var{mode} 
-
-@table @samp
-@item @emph{r}   (readonly) 
-@item @emph{w}   (write only)
-@item @emph{r|w} (read or write)
-@end table
-
-
-The other parameter gives a description of the register having a
-@var{shortcut} in the pipeline.  The valid values are:
-
-@table @code
-@item can_shortcut
-@item cannot_shortcut
-@end table
-
-For example:
-
-@smallexample
-  .extCoreRegister mlo,57,r,can_shortcut
-@end smallexample
-
-This defines an extension core register mlo with the value 57 which
-can shortcut the pipeline.
-
-@cindex @code{extInstruction} directive, ARC
-@item .extInstruction @var{name},@var{opcode},@var{subopcode},@var{suffixclass},@var{syntaxclass}
-The ARCtangent A4 allows the user to specify extension instructions.
-The extension instructions are not macros.  The assembler creates
-encodings for use of these instructions according to the specification
-by the user.  The parameters are:
-
-@table @bullet
-@item @var{name}
-Name of the extension instruction 
-
-@item @var{opcode}
-Opcode to be used. (Bits 27:31 in the encoding).  Valid values
-0x10-0x1f or 0x03
-
-@item @var{subopcode}
-Subopcode to be used.  Valid values are from 0x09-0x3f.  However the
-correct value also depends on @var{syntaxclass}
-
-@item @var{suffixclass}
-Determines the kinds of suffixes to be allowed.  Valid values are
-@code{SUFFIX_NONE}, @code{SUFFIX_COND}, 
-@code{SUFFIX_FLAG} which indicates the absence or presence of
-conditional suffixes and flag setting by the extension instruction.
-It is also possible to specify that an instruction sets the flags and
-is condtional by using @code{SUFFIX_CODE} | @code{SUFFIX_FLAG}.
-
-@item @var{syntaxclass}
-Determines the syntax class for the instruction.  It can have the
-following values:
-
-@table @code
-@item @code{SYNTAX_2OP}:
-2 Operand Instruction 
-@item @code{SYNTAX_3OP}:
-3 Operand Instruction 
-@end table
-
-In addition there could be modifiers for the syntax class as described
-below:
-
-@itemize @minus
-Syntax Class Modifiers are:
-
-@item @code{OP1_MUST_BE_IMM}:
-Modifies syntax class SYNTAX_3OP,  specifying that the first operand
-of a three-operand instruction must be an immediate (i.e., the result
-is discarded).  OP1_MUST_BE_IMM is used by bitwise ORing it with
-SYNTAX_3OP as given in the example below.  This could usually be used
-to set the flags using specific instructions and not retain results. 
-
-@item @code{OP1_IMM_IMPLIED}:
-Modifies syntax class SYNTAX_20P, it specifies that there is an
-implied immediate destination operand which does not appear in the
-syntax.  For example, if the source code contains an instruction like:
-
-@smallexample
-inst r1,r2 
-@end smallexample
-
-it really means that the first argument is an implied immediate (that
-is, the result is discarded).  This is the same as though the source
-code were: inst 0,r1,r2.  You use OP1_IMM_IMPLIED by bitwise ORing it
-with SYNTAX_20P.
-
-@end itemize 
-@end table
-
-For example, defining 64-bit multiplier with immediate operands:
-
-@smallexample
-.extInstruction mp64,0x14,0x0,SUFFIX_COND | SUFFIX_FLAG ,
-                SYNTAX_3OP|OP1_MUST_BE_IMM
-@end smallexample
-
-The above specifies an extension instruction called mp64 which has 3 operands,
-sets the flags, can be used with a condition code, for which the
-first operand is an immediate.  (Equivalent to discarding the result 
-of the operation).
-
-@smallexample
- .extInstruction mul64,0x14,0x00,SUFFIX_COND, SYNTAX_2OP|OP1_IMM_IMPLIED
-@end smallexample
-
-This describes a 2 operand instruction with an implicit first
-immediate operand.  The result of this operation would be discarded.
-
-@cindex @code{half} directive, ARC
-@item .half @var{expressions}
-*TODO*
-
-@cindex @code{long} directive, ARC
-@item .long @var{expressions}
-*TODO*
-
-@cindex @code{option} directive, ARC
-@item .option @var{arc|arc5|arc6|arc7|arc8}
-The @code{.option} directive must be followed by the desired core
-version. Again @code{arc} is an alias for
-@code{arc@value{ARC_CORE_DEFAULT}}.
-
-Note: the @code{.option} directive overrides the command line option
-@code{-marc}; a warning is emitted when the version is not consistent
-between the two - even for the implicit default core version
-(arc@value{ARC_CORE_DEFAULT}).
-
-@cindex @code{short} directive, ARC
-@item .short @var{expressions}
-*TODO*
-
-@cindex @code{word} directive, ARC
-@item .word @var{expressions}
-*TODO*
-
-@end table
-
-
-@node ARC Opcodes
-@section Opcodes
-
-@cindex ARC opcodes
-@cindex opcodes for ARC
 
 For information on the ARC instruction set, see @cite{ARC Programmers
 Reference Manual}, ARC International (www.arc.com)
diff -urp old/gas/doc/c-arm.texi new/gas/doc/c-arm.texi
--- old/gas/doc/c-arm.texi	2010-06-03 15:06:19.000000000 +0200
+++ new/gas/doc/c-arm.texi	2014-01-02 21:40:41.000000000 +0100
@@ -14,692 +14,3 @@
 @chapter ARM Dependent Features
 @end ifclear
 
-@cindex ARM support
-@cindex Thumb support
-@menu
-* ARM Options::              Options
-* ARM Syntax::               Syntax
-* ARM Floating Point::       Floating Point
-* ARM Directives::           ARM Machine Directives
-* ARM Opcodes::              Opcodes
-* ARM Mapping Symbols::      Mapping Symbols
-@end menu
-
-@node ARM Options
-@section Options
-@cindex ARM options (none)
-@cindex options for ARM (none)
-
-@table @code
-
-@cindex @code{-mcpu=} command line option, ARM
-@item -mcpu=@var{processor}[+@var{extension}@dots{}]
-This option specifies the target processor.  The assembler will issue an
-error message if an attempt is made to assemble an instruction which
-will not execute on the target processor.  The following processor names are
-recognized: 
-@code{arm1},
-@code{arm2},
-@code{arm250},
-@code{arm3},
-@code{arm6},
-@code{arm60},
-@code{arm600},
-@code{arm610},
-@code{arm620},
-@code{arm7},
-@code{arm7m},
-@code{arm7d},
-@code{arm7dm},
-@code{arm7di},
-@code{arm7dmi},
-@code{arm70},
-@code{arm700},
-@code{arm700i},
-@code{arm710},
-@code{arm710t},
-@code{arm720},
-@code{arm720t},
-@code{arm740t},
-@code{arm710c},
-@code{arm7100},
-@code{arm7500},
-@code{arm7500fe},
-@code{arm7t},
-@code{arm7tdmi},
-@code{arm7tdmi-s},
-@code{arm8},
-@code{arm810},
-@code{strongarm},
-@code{strongarm1},
-@code{strongarm110},
-@code{strongarm1100},
-@code{strongarm1110},
-@code{arm9},
-@code{arm920},
-@code{arm920t},
-@code{arm922t},
-@code{arm940t},
-@code{arm9tdmi},
-@code{arm9e},
-@code{arm926e},
-@code{arm926ej-s},
-@code{arm946e-r0},
-@code{arm946e},
-@code{arm946e-s},
-@code{arm966e-r0},
-@code{arm966e},
-@code{arm966e-s},
-@code{arm968e-s},
-@code{arm10t},
-@code{arm10tdmi},
-@code{arm10e},
-@code{arm1020},
-@code{arm1020t},
-@code{arm1020e},
-@code{arm1022e},
-@code{arm1026ej-s},
-@code{arm1136j-s},
-@code{arm1136jf-s},
-@code{arm1156t2-s},
-@code{arm1156t2f-s},
-@code{arm1176jz-s},
-@code{arm1176jzf-s},
-@code{mpcore},
-@code{mpcorenovfp},
-@code{cortex-a8},
-@code{cortex-r4},
-@code{cortex-m3},
-@code{ep9312} (ARM920 with Cirrus Maverick coprocessor),
-@code{i80200} (Intel XScale processor)
-@code{iwmmxt} (Intel(r) XScale processor with Wireless MMX(tm) technology coprocessor)
-and
-@code{xscale}.  
-The special name @code{all} may be used to allow the
-assembler to accept instructions valid for any ARM processor.
-
-In addition to the basic instruction set, the assembler can be told to 
-accept various extension mnemonics that extend the processor using the 
-co-processor instruction space.  For example, @code{-mcpu=arm920+maverick}
-is equivalent to specifying @code{-mcpu=ep9312}.  The following extensions
-are currently supported: 
-@code{+maverick}
-@code{+iwmmxt}
-and
-@code{+xscale}.
-
-@cindex @code{-march=} command line option, ARM
-@item -march=@var{architecture}[+@var{extension}@dots{}]
-This option specifies the target architecture.  The assembler will issue
-an error message if an attempt is made to assemble an instruction which
-will not execute on the target architecture.  The following architecture 
-names are recognized: 
-@code{armv1},
-@code{armv2},
-@code{armv2a},
-@code{armv2s},
-@code{armv3},
-@code{armv3m},
-@code{armv4},
-@code{armv4xm},
-@code{armv4t},
-@code{armv4txm},
-@code{armv5},
-@code{armv5t},
-@code{armv5txm},
-@code{armv5te},
-@code{armv5texp},
-@code{armv6},
-@code{armv6j},
-@code{armv6k},
-@code{armv6z},
-@code{armv6zk},
-@code{armv7},
-@code{armv7-a},
-@code{armv7-r},
-@code{armv7-m},
-@code{iwmmxt}
-and
-@code{xscale}.
-If both @code{-mcpu} and
-@code{-march} are specified, the assembler will use
-the setting for @code{-mcpu}.
-
-The architecture option can be extended with the same instruction set
-extension options as the @code{-mcpu} option.
-
-@cindex @code{-mfpu=} command line option, ARM
-@item -mfpu=@var{floating-point-format}
-
-This option specifies the floating point format to assemble for.  The
-assembler will issue an error message if an attempt is made to assemble
-an instruction which will not execute on the target floating point unit.  
-The following format options are recognized:
-@code{softfpa},
-@code{fpe},
-@code{fpe2},
-@code{fpe3},
-@code{fpa},
-@code{fpa10},
-@code{fpa11},
-@code{arm7500fe},
-@code{softvfp},
-@code{softvfp+vfp},
-@code{vfp},
-@code{vfp10},
-@code{vfp10-r0},
-@code{vfp9},
-@code{vfpxd},
-@code{arm1020t},
-@code{arm1020e},
-@code{arm1136jf-s}
-and
-@code{maverick}.
-
-In addition to determining which instructions are assembled, this option
-also affects the way in which the @code{.double} assembler directive behaves
-when assembling little-endian code.
-
-The default is dependent on the processor selected.  For Architecture 5 or 
-later, the default is to assembler for VFP instructions; for earlier 
-architectures the default is to assemble for FPA instructions.
-
-@cindex @code{-mthumb} command line option, ARM
-@item -mthumb
-This option specifies that the assembler should start assembling Thumb
-instructions; that is, it should behave as though the file starts with a 
-@code{.code 16} directive.
-
-@cindex @code{-mthumb-interwork} command line option, ARM
-@item -mthumb-interwork
-This option specifies that the output generated by the assembler should
-be marked as supporting interworking.
-
-@cindex @code{-mapcs} command line option, ARM
-@item -mapcs @code{[26|32]}
-This option specifies that the output generated by the assembler should
-be marked as supporting the indicated version of the Arm Procedure.
-Calling Standard.
-
-@cindex @code{-matpcs} command line option, ARM
-@item -matpcs
-This option specifies that the output generated by the assembler should 
-be marked as supporting the Arm/Thumb Procedure Calling Standard.  If
-enabled this option will cause the assembler to create an empty
-debugging section in the object file called .arm.atpcs.  Debuggers can
-use this to determine the ABI being used by.
-
-@cindex @code{-mapcs-float} command line option, ARM
-@item -mapcs-float
-This indicates the floating point variant of the APCS should be
-used.  In this variant floating point arguments are passed in FP
-registers rather than integer registers.
-
-@cindex @code{-mapcs-reentrant} command line option, ARM
-@item -mapcs-reentrant
-This indicates that the reentrant variant of the APCS should be used.
-This variant supports position independent code.
-
-@cindex @code{-mfloat-abi=} command line option, ARM
-@item -mfloat-abi=@var{abi}
-This option specifies that the output generated by the assembler should be
-marked as using specified floating point ABI.
-The following values are recognized:
-@code{soft},
-@code{softfp}
-and
-@code{hard}.
-
-@cindex @code{-eabi=} command line option, ARM
-@item -meabi=@var{ver}
-This option specifies which EABI version the produced object files should
-conform to.
-The following values are recognized:
-@code{gnu},
-@code{4}
-and
-@code{5}.
-
-@cindex @code{-EB} command line option, ARM
-@item -EB
-This option specifies that the output generated by the assembler should
-be marked as being encoded for a big-endian processor.
-
-@cindex @code{-EL} command line option, ARM
-@item -EL
-This option specifies that the output generated by the assembler should
-be marked as being encoded for a little-endian processor.
-
-@cindex @code{-k} command line option, ARM
-@cindex PIC code generation for ARM
-@item -k
-This option specifies that the output of the assembler should be marked
-as position-independent code (PIC).
-
-@end table
-
-
-@node ARM Syntax
-@section Syntax
-@menu
-* ARM-Chars::                Special Characters
-* ARM-Regs::                 Register Names
-* ARM-Relocations::	     Relocations
-@end menu
-
-@node ARM-Chars
-@subsection Special Characters
-
-@cindex line comment character, ARM
-@cindex ARM line comment character
-The presence of a @samp{@@} on a line indicates the start of a comment
-that extends to the end of the current line.  If a @samp{#} appears as
-the first character of a line, the whole line is treated as a comment.
-
-@cindex line separator, ARM
-@cindex statement separator, ARM
-@cindex ARM line separator
-The @samp{;} character can be used instead of a newline to separate
-statements.
-
-@cindex immediate character, ARM
-@cindex ARM immediate character
-Either @samp{#} or @samp{$} can be used to indicate immediate operands.
-
-@cindex identifiers, ARM
-@cindex ARM identifiers
-*TODO* Explain about /data modifier on symbols.
-
-@node ARM-Regs
-@subsection Register Names
-
-@cindex ARM register names
-@cindex register names, ARM
-*TODO* Explain about ARM register naming, and the predefined names.
-
-@node ARM Floating Point
-@section Floating Point
-
-@cindex floating point, ARM (@sc{ieee})
-@cindex ARM floating point (@sc{ieee})
-The ARM family uses @sc{ieee} floating-point numbers.
-
-@node ARM-Relocations
-@subsection ARM relocation generation
-
-@cindex data relocations, ARM
-@cindex ARM data relocations
-Specific data relocations can be generated by putting the relocation name
-in parentheses after the symbol name.  For example:
-
-@smallexample
-        .word foo(TARGET1)
-@end smallexample
-
-This will generate an @samp{R_ARM_TARGET1} relocation against the symbol
-@var{foo}.
-The following relocations are supported:
-@code{GOT},
-@code{GOTOFF},
-@code{TARGET1},
-@code{TARGET2},
-@code{SBREL},
-@code{TLSGD},
-@code{TLSLDM},
-@code{TLSLDO},
-@code{GOTTPOFF}
-and
-@code{TPOFF}.
-
-For compatibility with older toolchains the assembler also accepts
-@code{(PLT)} after branch targets.  This will generate the deprecated
-@samp{R_ARM_PLT32} relocation.
-
-@cindex MOVW and MOVT relocations, ARM
-Relocations for @samp{MOVW} and @samp{MOVT} instructions can be generated
-by prefixing the value with @samp{#:lower16:} and @samp{#:upper16}
-respectively.  For example to load the 32-bit address of foo into r0:
-
-@smallexample
-        MOVW r0, #:lower16:foo
-        MOVT r0, #:upper16:foo
-@end smallexample
-
-@node ARM Directives
-@section ARM Machine Directives
-
-@cindex machine directives, ARM
-@cindex ARM machine directives
-@table @code
-
-@cindex @code{align} directive, ARM
-@item .align @var{expression} [, @var{expression}]
-This is the generic @var{.align} directive.  For the ARM however if the
-first argument is zero (ie no alignment is needed) the assembler will
-behave as if the argument had been 2 (ie pad to the next four byte
-boundary).  This is for compatibility with ARM's own assembler.
-
-@cindex @code{req} directive, ARM
-@item @var{name} .req @var{register name}
-This creates an alias for @var{register name} called @var{name}.  For
-example:
-
-@smallexample
-        foo .req r0
-@end smallexample
-
-@cindex @code{unreq} directive, ARM
-@item .unreq @var{alias-name}
-This undefines a register alias which was previously defined using the
-@code{req} directive.  For example:
-
-@smallexample
-        foo .req r0
-        .unreq foo
-@end smallexample
-
-An error occurs if the name is undefined.  Note - this pseudo op can
-be used to delete builtin in register name aliases (eg 'r0').  This
-should only be done if it is really necessary.
-
-@cindex @code{code} directive, ARM
-@item .code @code{[16|32]}
-This directive selects the instruction set being generated. The value 16
-selects Thumb, with the value 32 selecting ARM.
-
-@cindex @code{thumb} directive, ARM
-@item .thumb
-This performs the same action as @var{.code 16}.
-
-@cindex @code{arm} directive, ARM
-@item .arm
-This performs the same action as @var{.code 32}.
-
-@cindex @code{force_thumb} directive, ARM
-@item .force_thumb
-This directive forces the selection of Thumb instructions, even if the
-target processor does not support those instructions
-
-@cindex @code{thumb_func} directive, ARM
-@item .thumb_func
-This directive specifies that the following symbol is the name of a
-Thumb encoded function.  This information is necessary in order to allow
-the assembler and linker to generate correct code for interworking
-between Arm and Thumb instructions and should be used even if
-interworking is not going to be performed.  The presence of this
-directive also implies @code{.thumb}
-
-This directive is not neccessary when generating EABI objects.  On these
-targets the encoding is implicit when generating Thumb code.
-
-@cindex @code{thumb_set} directive, ARM
-@item .thumb_set
-This performs the equivalent of a @code{.set} directive in that it
-creates a symbol which is an alias for another symbol (possibly not yet
-defined).  This directive also has the added property in that it marks
-the aliased symbol as being a thumb function entry point, in the same
-way that the @code{.thumb_func} directive does.
-
-@cindex @code{.ltorg} directive, ARM
-@item .ltorg
-This directive causes the current contents of the literal pool to be
-dumped into the current section (which is assumed to be the .text
-section) at the current location (aligned to a word boundary).
-@code{GAS} maintains a separate literal pool for each section and each
-sub-section.  The @code{.ltorg} directive will only affect the literal
-pool of the current section and sub-section.  At the end of assembly
-all remaining, un-empty literal pools will automatically be dumped.
-
-Note - older versions of @code{GAS} would dump the current literal
-pool any time a section change occurred.  This is no longer done, since
-it prevents accurate control of the placement of literal pools.
-
-@cindex @code{.pool} directive, ARM
-@item .pool
-This is a synonym for .ltorg.
-
-@cindex @code{.fnstart} directive, ARM
-@item .unwind_fnstart
-Marks the start of a function with an unwind table entry.
-
-@cindex @code{.fnend} directive, ARM
-@item .unwind_fnend
-Marks the end of a function with an unwind table entry.  The unwind index
-table entry is created when this directive is processed.
-
-If no personality routine has been specified then standard personality
-routine 0 or 1 will be used, depending on the number of unwind opcodes
-required.
-
-@cindex @code{.cantunwind} directive, ARM
-@item .cantunwind
-Prevents unwinding through the current function.  No personality routine
-or exception table data is required or permitted.
-
-@cindex @code{.personality} directive, ARM
-@item .personality @var{name}
-Sets the personality routine for the current function to @var{name}.
-
-@cindex @code{.personalityindex} directive, ARM
-@item .personalityindex @var{index}
-Sets the personality routine for the current function to the EABI standard
-routine number @var{index}
-
-@cindex @code{.handlerdata} directive, ARM
-@item .handlerdata
-Marks the end of the current function, and the start of the exception table
-entry for that function.  Anything between this directive and the
-@code{.fnend} directive will be added to the exception table entry.
-
-Must be preceded by a @code{.personality} or @code{.personalityindex}
-directive.
-
-@cindex @code{.save} directive, ARM
-@item .save @var{reglist}
-Generate unwinder annotations to restore the registers in @var{reglist}.
-The format of @var{reglist} is the same as the corresponding store-multiple
-instruction.
-
-@smallexample
-@exdent @emph{core registers}
-  .save @{r4, r5, r6, lr@}
-  stmfd sp!, @{r4, r5, r6, lr@}
-@exdent @emph{FPA registers}
-  .save f4, 2
-  sfmfd f4, 2, [sp]!
-@exdent @emph{VFP registers}
-  .save @{d8, d9, d10@}
-  fstmdx sp!, @{d8, d9, d10@}
-@exdent @emph{iWMMXt registers}
-  .save @{wr10, wr11@}
-  wstrd wr11, [sp, #-8]!
-  wstrd wr10, [sp, #-8]!
-or
-  .save wr11
-  wstrd wr11, [sp, #-8]!
-  .save wr10
-  wstrd wr10, [sp, #-8]!
-@end smallexample
-
-@cindex @code{.vsave} directive, ARM
-@item .vsave @var{vfp-reglist}
-Generate unwinder annotations to restore the VFP registers in @var{vfp-reglist}
-using FLDMD.  Also works for VFPv3 registers
-that are to be restored using VLDM.
-The format of @var{vfp-reglist} is the same as the corresponding store-multiple
-instruction.
-
-@smallexample
-@exdent @emph{VFP registers}
-  .vsave @{d8, d9, d10@}
-  fstmdd sp!, @{d8, d9, d10@}
-@exdent @emph{VFPv3 registers}
-  .vsave @{d15, d16, d17@}
-  vstm sp!, @{d15, d16, d17@}
-@end smallexample
-
-Since FLDMX and FSTMX are now deprecated, this directive should be
-used in favour of @code{.save} for saving VFP registers for ARMv6 and above.
-
-@cindex @code{.pad} directive, ARM
-@item .pad #@var{count}
-Generate unwinder annotations for a stack adjustment of @var{count} bytes.
-A positive value indicates the function prologue allocated stack space by
-decrementing the stack pointer.
-
-@cindex @code{.movsp} directive, ARM
-@item .movsp @var{reg} [, #@var{offset}]
-Tell the unwinder that @var{reg} contains an offset from the current
-stack pointer.  If @var{offset} is not specified then it is assumed to be
-zero.
-
-@cindex @code{.setfp} directive, ARM
-@item .setfp @var{fpreg}, @var{spreg} [, #@var{offset}]
-Make all unwinder annotations relaive to a frame pointer.  Without this
-the unwinder will use offsets from the stack pointer.
-
-The syntax of this directive is the same as the @code{sub} or @code{mov}
-instruction used to set the frame pointer.  @var{spreg} must be either
-@code{sp} or mentioned in a previous @code{.movsp} directive.
-
-@smallexample
-.movsp ip
-mov ip, sp
-@dots{}
-.setfp fp, ip, #4
-sub fp, ip, #4
-@end smallexample
-
-@cindex @code{.unwind_raw} directive, ARM
-@item .raw @var{offset}, @var{byte1}, @dots{}
-Insert one of more arbitary unwind opcode bytes, which are known to adjust
-the stack pointer by @var{offset} bytes.
-
-For example @code{.unwind_raw 4, 0xb1, 0x01} is equivalent to
-@code{.save @{r0@}}
-
-@cindex @code{.cpu} directive, ARM
-@item .cpu @var{name}
-Select the target processor.  Valid values for @var{name} are the same as
-for the @option{-mcpu} commandline option.
-
-@cindex @code{.arch} directive, ARM
-@item .arch @var{name}
-Select the target architecture.  Valid values for @var{name} are the same as
-for the @option{-march} commandline option.
-
-@cindex @code{.object_arch} directive, ARM
-@item .object_arch @var{name}
-Override the architecture recorded in the EABI object attribute section.
-Valid values for @var{name} are the same as for the @code{.arch} directive.
-Typically this is useful when code uses runtime detection of CPU features.
-
-@cindex @code{.fpu} directive, ARM
-@item .fpu @var{name}
-Select the floating point unit to assemble for.  Valid values for @var{name}
-are the same as for the @option{-mfpu} commandline option.
-
-@cindex @code{.eabi_attribute} directive, ARM
-@item .eabi_attribute @var{tag}, @var{value}
-Set the EABI object attribute number @var{tag} to @var{value}.  The value
-is either a @code{number}, @code{"string"}, or @code{number, "string"}
-depending on the tag.
-
-@end table
-
-@node ARM Opcodes
-@section Opcodes
-
-@cindex ARM opcodes
-@cindex opcodes for ARM
-@code{@value{AS}} implements all the standard ARM opcodes.  It also
-implements several pseudo opcodes, including several synthetic load
-instructions. 
-
-@table @code
-
-@cindex @code{NOP} pseudo op, ARM
-@item NOP
-@smallexample
-  nop
-@end smallexample
-
-This pseudo op will always evaluate to a legal ARM instruction that does
-nothing.  Currently it will evaluate to MOV r0, r0.
-
-@cindex @code{LDR reg,=<label>} pseudo op, ARM
-@item LDR 
-@smallexample
-  ldr <register> , = <expression>
-@end smallexample
-
-If expression evaluates to a numeric constant then a MOV or MVN
-instruction will be used in place of the LDR instruction, if the
-constant can be generated by either of these instructions.  Otherwise
-the constant will be placed into the nearest literal pool (if it not
-already there) and a PC relative LDR instruction will be generated.
-
-@cindex @code{ADR reg,<label>} pseudo op, ARM
-@item ADR
-@smallexample
-  adr <register> <label>
-@end smallexample
-
-This instruction will load the address of @var{label} into the indicated
-register.  The instruction will evaluate to a PC relative ADD or SUB
-instruction depending upon where the label is located.  If the label is
-out of range, or if it is not defined in the same file (and section) as
-the ADR instruction, then an error will be generated.  This instruction
-will not make use of the literal pool.
-
-@cindex @code{ADRL reg,<label>} pseudo op, ARM
-@item ADRL 
-@smallexample
-  adrl <register> <label>
-@end smallexample
-
-This instruction will load the address of @var{label} into the indicated
-register.  The instruction will evaluate to one or two PC relative ADD
-or SUB instructions depending upon where the label is located.  If a
-second instruction is not needed a NOP instruction will be generated in
-its place, so that this instruction is always 8 bytes long.
-
-If the label is out of range, or if it is not defined in the same file
-(and section) as the ADRL instruction, then an error will be generated.
-This instruction will not make use of the literal pool.
-
-@end table
-
-For information on the ARM or Thumb instruction sets, see @cite{ARM
-Software Development Toolkit Reference Manual}, Advanced RISC Machines
-Ltd.
-
-@node ARM Mapping Symbols
-@section Mapping Symbols
-
-The ARM ELF specification requires that special symbols be inserted
-into object files to mark certain features:
-
-@table @code
-
-@cindex @code{$a}
-@item $a
-At the start of a region of code containing ARM instructions.
-
-@cindex @code{$t}
-@item $t
-At the start of a region of code containing THUMB instructions.
-
-@cindex @code{$d}
-@item $d
-At the start of a region of data.
-
-@end table
-
-The assembler will automatically insert these symbols for you - there
-is no need to code them yourself.  Support for tagging symbols ($b,
-$f, $p and $m) which is also mentioned in the current ARM ELF
-specification is not implemented.  This is because they have been
-dropped from the new EABI and so tools cannot rely upon their
-presence.
-
diff -urp old/gas/doc/c-mips.texi new/gas/doc/c-mips.texi
--- old/gas/doc/c-mips.texi	2010-06-03 15:06:19.000000000 +0200
+++ new/gas/doc/c-mips.texi	2014-01-02 21:32:17.000000000 +0100
@@ -177,6 +177,7 @@ the @samp{mad} and @samp{madu} instructi
 instructions around accesses to the @samp{HI} and @samp{LO} registers.
 @samp{-no-m4650} turns off this option.
 
+@item -m3900
 @itemx -m3900
 @itemx -no-m3900
 @itemx -m4100
diff -urp old/gas/doc/c-tic54x.texi new/gas/doc/c-tic54x.texi
--- old/gas/doc/c-tic54x.texi	2010-06-03 15:06:20.000000000 +0200
+++ new/gas/doc/c-tic54x.texi	2014-01-02 21:36:50.000000000 +0100
@@ -12,756 +12,3 @@
 @chapter TIC54X Dependent Features
 @end ifclear
 
-@cindex TIC54X support
-@menu
-* TIC54X-Opts::              Command-line Options
-* TIC54X-Block::             Blocking
-* TIC54X-Env::               Environment Settings
-* TIC54X-Constants::         Constants Syntax
-* TIC54X-Subsyms::           String Substitution
-* TIC54X-Locals::            Local Label Syntax
-* TIC54X-Builtins::          Builtin Assembler Math Functions
-* TIC54X-Ext::               Extended Addressing Support
-* TIC54X-Directives::        Directives
-* TIC54X-Macros::            Macro Features
-* TIC54X-MMRegs::            Memory-mapped Registers
-@end menu
-
-@node TIC54X-Opts
-@section Options
-
-@cindex options, TIC54X
-@cindex TIC54X options
-The TMS320C54X version of @code{@value{AS}} has a few machine-dependent options.
-
-@cindex @samp{-mfar-mode} option, far-mode
-@cindex @samp{-mf} option, far-mode
-You can use the @samp{-mfar-mode} option to enable extended addressing mode.
-All addresses will be assumed to be > 16 bits, and the appropriate
-relocation types will be used.  This option is equivalent to using the
-@samp{.far_mode} directive in the assembly code.  If you do not use the
-@samp{-mfar-mode} option, all references will be assumed to be 16 bits.  
-This option may be abbreviated to @samp{-mf}.
-
-@cindex @samp{-mcpu} option, cpu
-You can use the @samp{-mcpu} option to specify a particular CPU.
-This option is equivalent to using the @samp{.version} directive in the
-assembly code.  For recognized CPU codes, see
-@xref{TIC54X-Directives,,@code{.version}}.  The default CPU version is
-@samp{542}.   
-
-@cindex @samp{-merrors-to-file} option, stderr redirect
-@cindex @samp{-me} option, stderr redirect
-You can use the @samp{-merrors-to-file} option to redirect error output
-to a file (this provided for those deficient environments which don't
-provide adequate output redirection).  This option may be abbreviated to
-@samp{-me}. 
-
-@node TIC54X-Block
-@section Blocking
-A blocked section or memory block is guaranteed not to cross the blocking
-boundary (usually a page, or 128 words) if it is smaller than the
-blocking size, or to start on a page boundary if it is larger than the
-blocking size.
-
-@node TIC54X-Env
-@section Environment Settings
-
-@cindex environment settings, TIC54X
-@cindex @samp{A_DIR} environment variable, TIC54X
-@cindex @samp{C54XDSP_DIR} environment variable, TIC54X
-@samp{C54XDSP_DIR} and @samp{A_DIR} are semicolon-separated
-paths which are added to the list of directories normally searched for
-source and include files.  @samp{C54XDSP_DIR} will override @samp{A_DIR}.
-
-@node TIC54X-Constants
-@section Constants Syntax
-
-@cindex constants, TIC54X
-The TIC54X version of @code{@value{AS}} allows the following additional
-constant formats, using a suffix to indicate the radix:
-@smallexample
-@cindex binary constants, TIC54X
-
-Binary                  @code{000000B, 011000b}
-Octal                   @code{10Q, 224q}
-Hexadecimal             @code{45h, 0FH}
-
-@end smallexample
-
-@node TIC54X-Subsyms
-@section String Substitution
-A subset of allowable symbols (which we'll call subsyms) may be assigned
-arbitrary string values.  This is roughly equivalent to C preprocessor
-#define macros.  When @code{@value{AS}} encounters one of these
-symbols, the symbol is replaced in the input stream by its string value.
-Subsym names @strong{must} begin with a letter. 
-
-Subsyms may be defined using the @code{.asg} and @code{.eval} directives
-(@xref{TIC54X-Directives,,@code{.asg}},
-@xref{TIC54X-Directives,,@code{.eval}}. 
-
-Expansion is recursive until a previously encountered symbol is seen, at
-which point substitution stops.  
-
-In this example, x is replaced with SYM2; SYM2 is replaced with SYM1, and SYM1
-is replaced with x.  At this point, x has already been encountered
-and the substitution stops.
-
-@smallexample @code
- .asg   "x",SYM1 
- .asg   "SYM1",SYM2
- .asg   "SYM2",x
- add    x,a             ; final code assembled is "add  x, a"
-@end smallexample
-
-Macro parameters are converted to subsyms; a side effect of this is the normal
-@code{@value{AS}} '\ARG' dereferencing syntax is unnecessary.  Subsyms
-defined within a macro will have global scope, unless the @code{.var}
-directive is used to identify the subsym as a local macro variable
-@pxref{TIC54X-Directives,,@code{.var}}.
-
-Substitution may be forced in situations where replacement might be
-ambiguous by placing colons on either side of the subsym.  The following
-code: 
-
-@smallexample @code
- .eval  "10",x
-LAB:X:  add     #x, a
-@end smallexample
-
-When assembled becomes:
-
-@smallexample @code
-LAB10  add     #10, a
-@end smallexample
-
-Smaller parts of the string assigned to a subsym may be accessed with
-the following syntax:
-
-@table @code
-@item @code{:@var{symbol}(@var{char_index}):}
-Evaluates to a single-character string, the character at @var{char_index}.
-@item @code{:@var{symbol}(@var{start},@var{length}):}
-Evaluates to a substring of @var{symbol} beginning at @var{start} with
-length @var{length}.
-@end table
-
-@node TIC54X-Locals
-@section Local Labels
-Local labels may be defined in two ways:
-
-@itemize @bullet
-@item
-$N, where N is a decimal number between 0 and 9
-@item
-LABEL?, where LABEL is any legal symbol name.  
-@end itemize
-
-Local labels thus defined may be redefined or automatically generated.
-The scope of a local label is based on when it may be undefined or reset.
-This happens when one of the following situations is encountered:
-
-@itemize @bullet
-@item
-.newblock directive @pxref{TIC54X-Directives,,@code{.newblock}}
-@item
-The current section is changed (.sect, .text, or .data)
-@item
-Entering or leaving an included file
-@item
-The macro scope where the label was defined is exited
-@end itemize
-
-@node TIC54X-Builtins
-@section Math Builtins
-
-@cindex math builtins, TIC54X
-@cindex TIC54X builtin math functions
-@cindex builtin math functions, TIC54X
-
-The following built-in functions may be used to generate a
-floating-point value.  All return a floating-point value except
-@samp{$cvi}, @samp{$int}, and @samp{$sgn}, which return an integer
-value. 
-
-@table @code
-@cindex @code{$acos} math builtin, TIC54X
-@item @code{$acos(@var{expr})}
-Returns the floating point arccosine of @var{expr}.
-
-@cindex @code{$asin} math builtin, TIC54X
-@item @code{$asin(@var{expr})}
-Returns the floating point arcsine of @var{expr}.
-
-@cindex @code{$atan} math builtin, TIC54X
-@item @code{$atan(@var{expr})}
-Returns the floating point arctangent of @var{expr}.
-
-@cindex @code{$atan2} math builtin, TIC54X
-@item @code{$atan2(@var{expr1},@var{expr2})}
-Returns the floating point arctangent of @var{expr1} / @var{expr2}.
-
-@cindex @code{$ceil} math builtin, TIC54X
-@item @code{$ceil(@var{expr})}
-Returns the smallest integer not less than @var{expr} as floating point.
-
-@cindex @code{$cosh} math builtin, TIC54X
-@item @code{$cosh(@var{expr})}
-Returns the floating point hyperbolic cosine of @var{expr}.
-
-@cindex @code{$cos} math builtin, TIC54X
-@item @code{$cos(@var{expr})}
-Returns the floating point cosine of @var{expr}.
-
-@cindex @code{$cvf} math builtin, TIC54X
-@item @code{$cvf(@var{expr})}
-Returns the integer value @var{expr} converted to floating-point.
-
-@cindex @code{$cvi} math builtin, TIC54X
-@item @code{$cvi(@var{expr})}
-Returns the floating point value @var{expr} converted to integer.
-
-@cindex @code{$exp} math builtin, TIC54X
-@item @code{$exp(@var{expr})}
-Returns the floating point value e ^ @var{expr}.
-
-@cindex @code{$fabs} math builtin, TIC54X
-@item @code{$fabs(@var{expr})}
-Returns the floating point absolute value of @var{expr}.
-
-@cindex @code{$floor} math builtin, TIC54X
-@item @code{$floor(@var{expr})}
-Returns the largest integer that is not greater than @var{expr} as
-floating point.
-
-@cindex @code{$fmod} math builtin, TIC54X
-@item @code{$fmod(@var{expr1},@var{expr2})}
-Returns the floating point remainder of @var{expr1} / @var{expr2}.
-
-@cindex @code{$int} math builtin, TIC54X
-@item @code{$int(@var{expr})}
-Returns 1 if @var{expr} evaluates to an integer, zero otherwise.
-
-@cindex @code{$ldexp} math builtin, TIC54X
-@item @code{$ldexp(@var{expr1},@var{expr2})}
-Returns the floating point value @var{expr1} * 2 ^ @var{expr2}.
-
-@cindex @code{$log10} math builtin, TIC54X
-@item @code{$log10(@var{expr})}
-Returns the base 10 logarithm of @var{expr}.
-
-@cindex @code{$log} math builtin, TIC54X
-@item @code{$log(@var{expr})}
-Returns the natural logarithm of @var{expr}.
-
-@cindex @code{$max} math builtin, TIC54X
-@item @code{$max(@var{expr1},@var{expr2})}
-Returns the floating point maximum of @var{expr1} and @var{expr2}.
-
-@cindex @code{$min} math builtin, TIC54X
-@item @code{$min(@var{expr1},@var{expr2})}
-Returns the floating point minimum of @var{expr1} and @var{expr2}.
-
-@cindex @code{$pow} math builtin, TIC54X
-@item @code{$pow(@var{expr1},@var{expr2})}
-Returns the floating point value @var{expr1} ^ @var{expr2}.
-
-@cindex @code{$round} math builtin, TIC54X
-@item @code{$round(@var{expr})}
-Returns the nearest integer to @var{expr} as a floating point number.
-
-@cindex @code{$sgn} math builtin, TIC54X
-@item @code{$sgn(@var{expr})}
-Returns -1, 0, or 1 based on the sign of @var{expr}.
-
-@cindex @code{$sin} math builtin, TIC54X
-@item @code{$sin(@var{expr})}
-Returns the floating point sine of @var{expr}.
-
-@cindex @code{$sinh} math builtin, TIC54X
-@item @code{$sinh(@var{expr})}
-Returns the floating point hyperbolic sine of @var{expr}.
-
-@cindex @code{$sqrt} math builtin, TIC54X
-@item @code{$sqrt(@var{expr})}
-Returns the floating point square root of @var{expr}.
-
-@cindex @code{$tan} math builtin, TIC54X
-@item @code{$tan(@var{expr})}
-Returns the floating point tangent of @var{expr}.
-
-@cindex @code{$tanh} math builtin, TIC54X
-@item @code{$tanh(@var{expr})}
-Returns the floating point hyperbolic tangent of @var{expr}.
-
-@cindex @code{$trunc} math builtin, TIC54X
-@item @code{$trunc(@var{expr})}
-Returns the integer value of @var{expr} truncated towards zero as
-floating point.
-
-@end table
-
-@node TIC54X-Ext
-@section Extended Addressing
-The @code{LDX} pseudo-op is provided for loading the extended addressing bits
-of a label or address.  For example, if an address @code{_label} resides
-in extended program memory, the value of @code{_label} may be loaded as
-follows:
-@smallexample @code
- ldx     #_label,16,a    ; loads extended bits of _label
- or      #_label,a       ; loads lower 16 bits of _label
- bacc    a               ; full address is in accumulator A
-@end smallexample
-
-@node TIC54X-Directives
-@section Directives
-
-@cindex machine directives, TIC54X
-@cindex TIC54X machine directives
-
-@table @code
-
-@cindex @code{align} directive, TIC54X
-@cindex @code{even} directive, TIC54X
-@item .align [@var{size}]
-@itemx .even
-Align the section program counter on the next boundary, based on
-@var{size}.  @var{size} may be any power of 2.  @code{.even} is
-equivalent to @code{.align} with a @var{size} of 2.
-@table @code
-@item 1
-Align SPC to word boundary
-@item 2
-Align SPC to longword boundary (same as .even)
-@item 128       
-Align SPC to page boundary
-@end table
-
-@cindex @code{asg} directive, TIC54X
-@item .asg @var{string}, @var{name}
-Assign @var{name} the string @var{string}.  String replacement is
-performed on @var{string} before assignment.
-
-@cindex @code{eval} directive, TIC54X
-@itemx .eval @var{string}, @var{name}
-Evaluate the contents of string @var{string} and assign the result as a
-string to the subsym @var{name}.  String replacement is performed on
-@var{string} before assignment. 
-
-@cindex @code{bss} directive, TIC54X
-@item .bss @var{symbol}, @var{size} [, [@var{blocking_flag}] [,@var{alignment_flag}]]
-Reserve space for @var{symbol} in the .bss section.  @var{size} is in
-words.  If present, @var{blocking_flag} indicates the allocated space
-should be aligned on a page boundary if it would otherwise cross a page
-boundary.  If present, @var{alignment_flag} causes the assembler to
-allocate @var{size} on a long word boundary.
-
-@cindex @code{byte} directive, TIC54X
-@cindex @code{ubyte} directive, TIC54X
-@cindex @code{char} directive, TIC54X
-@cindex @code{uchar} directive, TIC54X
-@item .byte @var{value} [,...,@var{value_n}]
-@itemx .ubyte @var{value} [,...,@var{value_n}]
-@itemx .char @var{value} [,...,@var{value_n}]
-@itemx .uchar @var{value} [,...,@var{value_n}]
-Place one or more bytes into consecutive words of the current section.
-The upper 8 bits of each word is zero-filled.  If a label is used, it
-points to the word allocated for the first byte encountered.
-
-@cindex @code{clink} directive, TIC54X
-@item .clink ["@var{section_name}"]
-Set STYP_CLINK flag for this section, which indicates to the linker that
-if no symbols from this section are referenced, the section should not
-be included in the link.  If @var{section_name} is omitted, the current
-section is used.
-
-@cindex @code{c_mode} directive, TIC54X
-@item .c_mode
-TBD.
-
-@cindex @code{copy} directive, TIC54X
-@item .copy "@var{filename}" | @var{filename}
-@itemx .include "@var{filename}" | @var{filename}
-Read source statements from @var{filename}.  The normal include search
-path is used.  Normally .copy will cause statements from the included
-file to be printed in the assembly listing and .include will not, but
-this distinction is not currently implemented.
-
-@cindex @code{data} directive, TIC54X
-@item .data
-Begin assembling code into the .data section.
-
-@cindex @code{double} directive, TIC54X
-@cindex @code{ldouble} directive, TIC54X
-@cindex @code{float} directive, TIC54X
-@cindex @code{xfloat} directive, TIC54X
-@item .double @var{value} [,...,@var{value_n}]
-@itemx .ldouble @var{value} [,...,@var{value_n}]
-@itemx .float @var{value} [,...,@var{value_n}]
-@itemx .xfloat @var{value} [,...,@var{value_n}]
-Place an IEEE single-precision floating-point representation of one or
-more floating-point values into the current section.  All but
-@code{.xfloat} align the result on a longword boundary.  Values are
-stored most-significant word first. 
-
-@cindex @code{drlist} directive, TIC54X
-@cindex @code{drnolist} directive, TIC54X
-@item .drlist
-@itemx .drnolist
-Control printing of directives to the listing file.  Ignored.
-
-@cindex @code{emsg} directive, TIC54X
-@cindex @code{mmsg} directive, TIC54X
-@cindex @code{wmsg} directive, TIC54X
-@item .emsg @var{string}
-@itemx .mmsg @var{string}
-@itemx .wmsg @var{string}
-Emit a user-defined error, message, or warning, respectively.
-
-@cindex @code{far_mode} directive, TIC54X
-@item .far_mode
-Use extended addressing when assembling statements.  This should appear
-only once per file, and is equivalent to the -mfar-mode option @pxref{TIC54X-Opts,,@code{-mfar-mode}}.
-
-@cindex @code{fclist} directive, TIC54X
-@cindex @code{fcnolist} directive, TIC54X
-@item .fclist
-@itemx .fcnolist
-Control printing of false conditional blocks to the listing file.
-
-@cindex @code{field} directive, TIC54X
-@item .field @var{value} [,@var{size}]
-Initialize a bitfield of @var{size} bits in the current section.  If
-@var{value} is relocatable, then @var{size} must be 16.  @var{size}
-defaults to 16 bits.  If @var{value} does not fit into @var{size} bits,
-the value will be truncated.  Successive @code{.field} directives will
-pack starting at the current word, filling the most significant bits
-first, and aligning to the start of the next word if the field size does
-not fit into the space remaining in the current word.  A @code{.align}
-directive with an operand of 1 will force the next @code{.field}
-directive to begin packing into a new word.  If a label is used, it
-points to the word that contains the specified field.
-
-@cindex @code{global} directive, TIC54X
-@cindex @code{def} directive, TIC54X
-@cindex @code{ref} directive, TIC54X
-@item .global @var{symbol} [,...,@var{symbol_n}]
-@itemx .def @var{symbol} [,...,@var{symbol_n}]
-@itemx .ref @var{symbol} [,...,@var{symbol_n}]
-@code{.def} nominally identifies a symbol defined in the current file
-and available to other files.  @code{.ref} identifies a symbol used in
-the current file but defined elsewhere.  Both map to the standard
-@code{.global} directive.
-
-@cindex @code{half} directive, TIC54X
-@cindex @code{uhalf} directive, TIC54X
-@cindex @code{short} directive, TIC54X
-@cindex @code{ushort} directive, TIC54X
-@cindex @code{int} directive, TIC54X
-@cindex @code{uint} directive, TIC54X
-@cindex @code{word} directive, TIC54X
-@cindex @code{uword} directive, TIC54X
-@item .half @var{value} [,...,@var{value_n}]
-@itemx .uhalf @var{value} [,...,@var{value_n}]
-@itemx .short @var{value} [,...,@var{value_n}]
-@itemx .ushort @var{value} [,...,@var{value_n}]
-@itemx .int @var{value} [,...,@var{value_n}]
-@itemx .uint @var{value} [,...,@var{value_n}]
-@itemx .word @var{value} [,...,@var{value_n}]
-@itemx .uword @var{value} [,...,@var{value_n}]
-Place one or more values into consecutive words of the current section.
-If a label is used, it points to the word allocated for the first value
-encountered. 
-
-@cindex @code{label} directive, TIC54X
-@item .label @var{symbol}
-Define a special @var{symbol} to refer to the load time address of the
-current section program counter.
-
-@cindex @code{length} directive, TIC54X
-@cindex @code{width} directive, TIC54X
-@item .length
-@itemx .width
-Set the page length and width of the output listing file.  Ignored.
-
-@cindex @code{list} directive, TIC54X
-@cindex @code{nolist} directive, TIC54X
-@item .list
-@itemx .nolist
-Control whether the source listing is printed.  Ignored.
-
-@cindex @code{long} directive, TIC54X
-@cindex @code{ulong} directive, TIC54X
-@cindex @code{xlong} directive, TIC54X
-@item .long @var{value} [,...,@var{value_n}]
-@itemx .ulong @var{value} [,...,@var{value_n}]
-@itemx .xlong @var{value} [,...,@var{value_n}]
-Place one or more 32-bit values into consecutive words in the current
-section.  The most significant word is stored first.  @code{.long} and
-@code{.ulong} align the result on a longword boundary; @code{xlong} does
-not. 
-
-@cindex @code{loop} directive, TIC54X
-@cindex @code{break} directive, TIC54X
-@cindex @code{endloop} directive, TIC54X
-@item .loop [@var{count}]
-@itemx .break [@var{condition}]
-@itemx .endloop
-Repeatedly assemble a block of code.  @code{.loop} begins the block, and
-@code{.endloop} marks its termination.  @var{count} defaults to 1024,
-and indicates the number of times the block should be repeated.
-@code{.break} terminates the loop so that assembly begins after the
-@code{.endloop} directive.  The optional @var{condition} will cause the
-loop to terminate only if it evaluates to zero.
-
-@cindex @code{macro} directive, TIC54X
-@cindex @code{endm} directive, TIC54X
-@item @var{macro_name} .macro [@var{param1}][,...@var{param_n}]
-@itemx [.mexit]
-@itemx .endm
-See the section on macros for more explanation (@xref{TIC54X-Macros}.
-
-@cindex @code{mlib} directive, TIC54X
-@item .mlib "@var{filename}" | @var{filename}
-Load the macro library @var{filename}.  @var{filename} must be an
-archived library (BFD ar-compatible) of text files, expected to contain
-only macro definitions.   The standard include search path is used.
-
-@cindex @code{mlist} directive, TIC54X
-@cindex @code{mnolist} directive, TIC54X
-@item .mlist
-@item .mnolist
-Control whether to include macro and loop block expansions in the
-listing output.  Ignored.
-
-@cindex @code{mmregs} directive, TIC54X
-@item .mmregs
-Define global symbolic names for the 'c54x registers.  Supposedly
-equivalent to executing @code{.set} directives for each register with
-its memory-mapped value, but in reality is provided only for
-compatibility and does nothing.
-
-@cindex @code{newblock} directive, TIC54X
-@item .newblock
-This directive resets any TIC54X local labels currently defined.  Normal
-@code{@value{AS}} local labels are unaffected.
-
-@cindex @code{option} directive, TIC54X
-@item .option @var{option_list}
-Set listing options.  Ignored.
-
-@cindex @code{sblock} directive, TIC54X
-@item .sblock "@var{section_name}" | @var{section_name} [,"@var{name_n}" | @var{name_n}]
-Designate @var{section_name} for blocking.  Blocking guarantees that a
-section will start on a page boundary (128 words) if it would otherwise
-cross a page boundary.  Only initialized sections may be designated with
-this directive.  See also @xref{TIC54X-Block}.
-
-@cindex @code{sect} directive, TIC54X
-@item .sect "@var{section_name}"
-Define a named initialized section and make it the current section.
-
-@cindex @code{set} directive, TIC54X
-@cindex @code{equ} directive, TIC54X
-@item @var{symbol} .set "@var{value}"
-@itemx @var{symbol} .equ "@var{value}"
-Equate a constant @var{value} to a @var{symbol}, which is placed in the
-symbol table.  @var{symbol} may not be previously defined.  
-
-@cindex @code{space} directive, TIC54X
-@cindex @code{bes} directive, TIC54X
-@item .space @var{size_in_bits}
-@itemx .bes @var{size_in_bits}
-Reserve the given number of bits in the current section and zero-fill
-them.  If a label is used with @code{.space}, it points to the
-@strong{first} word reserved.  With @code{.bes}, the label points to the
-@strong{last} word reserved.
-
-@cindex @code{sslist} directive, TIC54X
-@cindex @code{ssnolist} directive, TIC54X
-@item .sslist
-@itemx .ssnolist
-Controls the inclusion of subsym replacement in the listing output.  Ignored.
-
-@cindex @code{string} directive, TIC54X
-@cindex @code{pstring} directive, TIC54X
-@item .string "@var{string}" [,...,"@var{string_n}"]
-@itemx .pstring "@var{string}" [,...,"@var{string_n}"]
-Place 8-bit characters from @var{string} into the current section.
-@code{.string} zero-fills the upper 8 bits of each word, while
-@code{.pstring} puts two characters into each word, filling the
-most-significant bits first.  Unused space is zero-filled.  If a label
-is used, it points to the first word initialized.
-
-@cindex @code{struct} directive, TIC54X
-@cindex @code{tag} directive, TIC54X
-@cindex @code{endstruct} directive, TIC54X
-@item [@var{stag}] .struct [@var{offset}]
-@itemx [@var{name_1}] element [@var{count_1}]
-@itemx [@var{name_2}] element [@var{count_2}]
-@itemx [@var{tname}] .tag @var{stagx} [@var{tcount}]
-@itemx ...
-@itemx [@var{name_n}] element [@var{count_n}]
-@itemx [@var{ssize}] .endstruct
-@itemx @var{label} .tag [@var{stag}]
-Assign symbolic offsets to the elements of a structure.  @var{stag}
-defines a symbol to use to reference the structure.  @var{offset}
-indicates a starting value to use for the first element encountered;
-otherwise it defaults to zero.  Each element can have a named offset,
-@var{name}, which is a symbol assigned the value of the element's offset
-into the structure.  If @var{stag} is missing, these become global
-symbols.  @var{count} adjusts the offset that many times, as if
-@code{element} were an array.  @code{element} may be one of
-@code{.byte}, @code{.word}, @code{.long}, @code{.float}, or any
-equivalent of those, and the structure offset is adjusted accordingly.
-@code{.field} and @code{.string} are also allowed; the size of
-@code{.field} is one bit, and @code{.string} is considered to be one
-word in size.  Only element descriptors, structure/union tags,
-@code{.align} and conditional assembly directives are allowed within
-@code{.struct}/@code{.endstruct}.  @code{.align} aligns member offsets
-to word boundaries only.  @var{ssize}, if provided, will always be
-assigned the size of the structure.
-
-The @code{.tag} directive, in addition to being used to define a
-structure/union element within a structure, may be used to apply a
-structure to a symbol.  Once applied to @var{label}, the individual
-structure elements may be applied to @var{label} to produce the desired
-offsets using @var{label} as the structure base. 
-
-@cindex @code{tab} directive, TIC54X
-@item .tab
-Set the tab size in the output listing.  Ignored.
-
-@cindex @code{union} directive, TIC54X
-@cindex @code{tag} directive, TIC54X
-@cindex @code{endunion} directive, TIC54X
-@item [@var{utag}] .union 
-@itemx [@var{name_1}] element [@var{count_1}]
-@itemx [@var{name_2}] element [@var{count_2}]
-@itemx [@var{tname}] .tag @var{utagx}[,@var{tcount}]
-@itemx ...
-@itemx [@var{name_n}] element [@var{count_n}]
-@itemx [@var{usize}] .endstruct
-@itemx @var{label} .tag [@var{utag}]
-Similar to @code{.struct}, but the offset after each element is reset to
-zero, and the @var{usize} is set to the maximum of all defined elements.
-Starting offset for the union is always zero.
-
-@cindex @code{usect} directive, TIC54X
-@item [@var{symbol}] .usect "@var{section_name}", @var{size}, [,[@var{blocking_flag}] [,@var{alignment_flag}]]
-Reserve space for variables in a named, uninitialized section (similar to
-.bss).  @code{.usect} allows definitions sections independent of .bss.
-@var{symbol} points to the first location reserved by this allocation.
-The symbol may be used as a variable name.  @var{size} is the allocated
-size in words.  @var{blocking_flag} indicates whether to block this
-section on a page boundary (128 words) (@pxref{TIC54X-Block}).
-@var{alignment flag} indicates whether the section should be
-longword-aligned.  
-
-@cindex @code{var} directive, TIC54X
-@item .var @var{sym}[,..., @var{sym_n}]
-Define a subsym to be a local variable within a macro.  See
-@xref{TIC54X-Macros}. 
-
-@cindex @code{version} directive, TIC54X
-@item .version @var{version}
-Set which processor to build instructions for.  Though the following
-values are accepted, the op is ignored.
-@table @code
-@item 541
-@itemx 542
-@itemx 543
-@itemx 545
-@itemx 545LP
-@itemx 546LP
-@itemx 548
-@itemx 549
-@end table
-@end table
-
-@node TIC54X-Macros
-@section Macros
-
-@cindex TIC54X-specific macros
-@cindex macros, TIC54X
-Macros do not require explicit dereferencing of arguments (i.e., \ARG).  
-
-During macro expansion, the macro parameters are converted to subsyms.
-If the number of arguments passed the macro invocation exceeds the
-number of parameters defined, the last parameter is assigned the string
-equivalent of all remaining arguments.  If fewer arguments are given
-than parameters, the missing parameters are assigned empty strings.  To
-include a comma in an argument, you must enclose the argument in quotes.
-
-@cindex subsym builtins, TIC54X
-@cindex TIC54X subsym builtins
-@cindex builtin subsym functions, TIC54X
-The following built-in subsym functions allow examination of the string
-value of subsyms (or ordinary strings).  The arguments are strings
-unless otherwise indicated (subsyms passed as args will be replaced by
-the strings they represent).
-@table @code
-@cindex @code{$symlen} subsym builtin, TIC54X
-@item @code{$symlen(@var{str})}
-Returns the length of @var{str}.
-
-@cindex @code{$symcmp} subsym builtin, TIC54X
-@item @code{$symcmp(@var{str1},@var{str2})}
-Returns 0 if @var{str1} == @var{str2}, non-zero otherwise.  
-
-@cindex @code{$firstch} subsym builtin, TIC54X
-@item @code{$firstch(@var{str},@var{ch})}
-Returns index of the first occurrence of character constant @var{ch} in
-@var{str}. 
-
-@cindex @code{$lastch} subsym builtin, TIC54X
-@item @code{$lastch(@var{str},@var{ch})}
-Returns index of the last occurrence of character constant @var{ch} in
-@var{str}. 
-
-@cindex @code{$isdefed} subsym builtin, TIC54X
-@item @code{$isdefed(@var{symbol})}
-Returns zero if the symbol @var{symbol} is not in the symbol table,
-non-zero otherwise.
-
-@cindex @code{$ismember} subsym builtin, TIC54X
-@item @code{$ismember(@var{symbol},@var{list})}
-Assign the first member of comma-separated string @var{list} to
-@var{symbol}; @var{list} is reassigned the remainder of the list.  Returns
-zero if @var{list} is a null string.  Both arguments must be subsyms.
-
-@cindex @code{$iscons} subsym builtin, TIC54X
-@item @code{$iscons(@var{expr})}
-Returns 1 if string @var{expr} is binary, 2 if octal, 3 if hexadecimal,
-4 if a character, 5 if decimal, and zero if not an integer.
-
-@cindex @code{$isname} subsym builtin, TIC54X
-@item @code{$isname(@var{name})}
-Returns 1 if @var{name} is a valid symbol name, zero otherwise.
-
-@cindex @code{$isreg} subsym builtin, TIC54X
-@item @code{$isreg(@var{reg})}
-Returns 1 if @var{reg} is a valid predefined register name (AR0-AR7 only).
-
-@cindex @code{$structsz} subsym builtin, TIC54X
-@item @code{$structsz(@var{stag})}
-Returns the size of the structure or union represented by @var{stag}.
-
-@cindex @code{$structacc} subsym builtin, TIC54X
-@item @code{$structacc(@var{stag})}
-Returns the reference point of the structure or union represented by
-@var{stag}.   Always returns zero.
-
-@end table
-
-@node TIC54X-MMRegs
-@section Memory-mapped Registers
-
-@cindex TIC54X memory-mapped registers
-@cindex registers, TIC54X memory-mapped
-@cindex memory-mapped registers, TIC54X
-The following symbols are recognized as memory-mapped registers:
-
-@table @code
-@end table
diff -urp old/ld/ld.texinfo new/ld/ld.texinfo
--- old/ld/ld.texinfo	2014-01-02 21:19:12.000000000 +0100
+++ new/ld/ld.texinfo	2014-01-02 21:43:32.000000000 +0100
@@ -1724,15 +1724,6 @@ Display the version number for @command{
 supported.  Display which input files can and cannot be opened.  Display
 the linker script being used by the linker.
 
-@kindex --version-script=@var{version-scriptfile}
-@cindex version script, symbol versions
-@itemx --version-script=@var{version-scriptfile}
-Specify the name of a version script to the linker.  This is typically
-used when creating shared libraries to specify additional information
-about the version hierarchy for the library being created.  This option
-is only meaningful on ELF platforms which support shared libraries.
-@xref{VERSION}.
-
 @kindex --warn-common
 @cindex warnings, on combining symbols
 @cindex combining symbols, warnings on
diff -urp old/bfd/elf.c new/bfd/elf.c
--- old/bfd/elf.c	2014-01-02 21:54:43.000000000 +0100
+++ new/bfd/elf.c	2014-01-02 21:54:00.000000000 +0100
@@ -20,7 +20,6 @@
    Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.  */
 
 /*
-SECTION
 	ELF backends
 
 	BFD support for ELF formats is being worked on.
